#!/usr/bin/env python
import rospy
from geometry_msgs.msg import PoseStamped
from std_msgs.msg import Float32, String
from drone_ros_msgs.msg import PoseCost
import signal
import sys
import numpy as np

class ViewManager(object):
    def __init__(self):
        self._pose_display_pub = rospy.Publisher("/alternative_pose", PoseStamped, queue_size=1)
        self._drone_goal_pub = rospy.Publisher('/panda_ik/drone_goal', PoseStamped, queue_size=1)
        
        self._cost_sub = rospy.Subscriber('/panda_ik/view_cost', Float32, self.on_cost)
        self._pose_sub = rospy.Subscriber('/panda_ik/global_solutions', PoseCost, self.on_pose)
        self._command_sub = rospy.Subscriber('/view_manager/command', String, self.on_command)
        
        self._alternatives = []
        self._costs = []
        self._current_cost = 0
    
    def on_command(self, msg):
        if msg.data == "go":
            self._drone_goal_pub.publish(self._alternatives[np.argmin(self._costs)])

    def on_pose(self, msg):
        self._alternatives.append(msg.pose)
        self._costs.append(msg.cost.data)
        if len(self._alternatives) > 10:
            self._alternatives.pop(0)
            self._costs.pop(0)
        best_idx = np.argmin(self._costs)
        self._pose_display_pub.publish(self._alternatives[best_idx])
        # print("Current cost: "+str(self._current_cost))
        # print("Best cost: "+str(min(self._costs)))
            
    def on_cost(self, msg):
        self._current_cost = msg.data
    
    def run(self):
        rospy.spin()

    def signal_handler(self, signal, frame):
        sys.exit()

if __name__ == "__main__":
    rospy.init_node('view_manager')
    manager = ViewManager()
    signal.signal(signal.SIGINT, manager.signal_handler)
    manager.run()
