#!/usr/bin/env python
from typing import Callable
import rospy
from geometry_msgs.msg import Twist, PoseStamped, TwistStamped
from std_msgs.msg import String
import tf2_geometry_msgs
import tf
from tf.transformations import *
import tf2_ros
import signal
import sys
import PyKDL
from scipy.spatial.transform import Rotation

REFERENCE_FRAME='panda_link0'
CAMERA_FRAME='drone'
#CAMERA_FRAME='panda_link0'

class VelocityController(object):
    def __init__(self):
        self._br = tf2_ros.TransformBroadcaster()
        self._tfBuffer = tf2_ros.Buffer()
        self._tl = tf2_ros.TransformListener(self._tfBuffer)
        rospy.sleep(1.5)
        self._control_frame = 'drone'

        self._goal_pub = rospy.Publisher('/panda_ik/input', TwistStamped, queue_size=1)
        self._twist_sub = rospy.Subscriber("/commanded_vel", Twist, self.on_twist)
        self._control_frame_sub = rospy.Subscriber("/control_frame", String, self.on_control_frame)
    
    def on_control_frame(self, msg):
        self._control_frame = msg.data
            
    def on_twist(self, msg):
        control_t = self._tfBuffer.lookup_transform(REFERENCE_FRAME,self._control_frame,rospy.Time(0))
        t=PyKDL.Twist()
        t[0]=msg.linear.x
        t[1]=msg.linear.y
        t[2]=msg.linear.z
        t[3]=msg.angular.x
        t[4]=msg.angular.y
        t[5]=msg.angular.z
        rpy=PyKDL.Rotation.Quaternion(control_t.transform.rotation.x,control_t.transform.rotation.y,control_t.transform.rotation.z,control_t.transform.rotation.w).GetRPY()
        R=PyKDL.Rotation.RPY(rpy[0],rpy[1],rpy[2])
        if self._control_frame == CAMERA_FRAME:
            R=PyKDL.Rotation.RPY(0,0,rpy[2])
        t=R*t

        twist = TwistStamped()
        twist.header.frame_id = "panda_gripper_joint"
        twist.header.stamp = rospy.Time.now()
        twist.twist.linear.x = t[0]
        twist.twist.linear.y = t[1]
        twist.twist.linear.z = t[2]
        twist.twist.angular.x = t[3]
        twist.twist.angular.y = t[4]
        twist.twist.angular.z = t[5]

        self._goal_pub.publish(twist)
    
    def run(self):
        rospy.spin()

    def signal_handler(self, signal, frame):
        sys.exit()

if __name__ == "__main__":
    rospy.init_node('velocity_controller')
    vel_controller = VelocityController()
    signal.signal(signal.SIGINT, vel_controller.signal_handler)
    vel_controller.run()
