#!/usr/bin/env python
from typing import Callable
import rospy
import actionlib
import control_msgs.msg 
from geometry_msgs.msg import Twist, PoseStamped
from franka_gripper.msg import GraspAction, MoveAction, GraspGoal, MoveGoal
from sensor_msgs.msg import Joy
from std_msgs.msg import String
import tf2_geometry_msgs
import tf
from tf.transformations import *
import tf2_ros
import signal
import sys
import numpy as np

class JoyDriver(object):
    def __init__(self):
        self._virtual_robot = rospy.get_param('~virtual_robot',True)
        #self._virtual_drone = rospy.get_param('~virtual_drone')

        self._twist_pub = rospy.Publisher("/commanded_vel", Twist, queue_size=1)
        if self._virtual_robot:
            self._command_pub = rospy.Publisher("/simulator/commands", String, queue_size=1)
        else:
            self._grasp_client = actionlib.SimpleActionClient('/franka_gripper/grasp', GraspAction)
            self._move_client = actionlib.SimpleActionClient('/franka_gripper/move', MoveAction)
        
        self._drone_command_pub = rospy.Publisher("/tello/cmd", String, queue_size=1)
        self._view_command_pub = rospy.Publisher('/view_manager/command', String, queue_size=1)

        self._joy_sub = rospy.Subscriber('/joy', Joy, self.on_joy)

        self._a_pressed = False
        self._b_pressed = False
        self._x_pressed = False
        self._grasped = False
        self._ax2_init = False
        self._ax5_init = False
        self._y_pressed = False
        self._right_pressed = False
            

    def mapping(self,x,low=0.005,high=.25):
        a = (np.log(high)-np.log(low))/0.9
        b = np.exp(np.log(low)-.1*a)
        return np.sign(x)*b*((np.exp(a*np.abs(x))-1))
        
    def on_joy(self, msg):
        ax = np.array(msg.axes)
        if ax[2] != 0:
            self._ax2_init = True
        if not self._ax2_init:
            ax[2]=1
        if ax[5] != 0:
            self._ax5_init = True
        if not self._ax5_init:
            ax[5]=1
        t = Twist()
        t.linear.x = self.mapping(ax[1])
        t.linear.y = self.mapping(ax[0])
        t.linear.z = self.mapping((ax[2]-ax[5])/2)
        t.angular.x = self.mapping(-ax[3],low=.01,high=1)
        t.angular.y = self.mapping(ax[4],low=.01,high=1)
        if msg.buttons[4]:
            t.angular.z = -np.pi/4
        if msg.buttons[5]:
            t.angular.z = np.pi/4
        self._twist_pub.publish(t)

        if msg.buttons[0] and not self._a_pressed:
            self._a_pressed = True
            if self._virtual_robot:
                self._command_pub.publish("toggle_gripper")
            else:
                if not self._grasped:
                    goal = GraspGoal()
                    goal.width = 0
                    goal.epsilon.inner = .05
                    goal.epsilon.outer = .05
                    goal.speed = .1
                    goal.force = 30
                    self._grasp_client.send_goal(goal)
                    print("close "+str(self._grasp_client.wait_for_server()))
                else:
                    goal = MoveGoal()
                    goal.width = 0.07
                    goal.speed = .1
                    self._move_client.send_goal(goal)
                    print("open "+str(self._move_client.wait_for_server()))

                self._grasped = not self._grasped
        
        if not msg.buttons[0] and self._a_pressed:
            self._a_pressed = False

        if msg.buttons[1] and not self._b_pressed:
            self._b_pressed = True
            self._drone_command_pub.publish("takeoff")
        if not msg.buttons[1] and self._b_pressed:
            self._b_pressed = False

        if msg.buttons[2] and not self._x_pressed:
            self._x_pressed = True
            self._drone_command_pub.publish("land")
        if not msg.buttons[2] and self._x_pressed:
            self._x_pressed = False

        if msg.buttons[3] and not self._y_pressed:
            self._y_pressed = True
            self._view_command_pub.publish("go")
        if not msg.buttons[3] and self._y_pressed:
            self._y_pressed = False

        if msg.axes[6] and not self._right_pressed:
            self._right_pressed = True
            self._view_command_pub.publish("new")
        if not msg.axes[6] and self._right_pressed:
            self._right_pressed = False
    
    def run(self):
        rospy.spin()

    def signal_handler(self, signal, frame):
        sys.exit()

if __name__ == "__main__":
    rospy.init_node('joy_driver')
    mouse_driver = JoyDriver()
    signal.signal(signal.SIGINT, mouse_driver.signal_handler)
    mouse_driver.run()
